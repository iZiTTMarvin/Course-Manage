import { type PropType } from 'vue-demi';
export declare const VueDraggable: import("vue-demi").DefineComponent<{
    modelValue: {
        type: PropType<any[]>;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
    };
}, () => import("vue-demi").VNode<import("vue-demi").RendererNode, import("vue-demi").RendererElement, {
    [key: string]: any;
}> | undefined, unknown, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, ("update" | "start" | "add" | "remove" | "choose" | "unchoose" | "end" | "sort" | "filter" | "clone" | "move" | "change" | "update:modelValue")[], "update" | "start" | "add" | "remove" | "choose" | "unchoose" | "end" | "sort" | "filter" | "clone" | "move" | "change" | "update:modelValue", import("vue-demi").VNodeProps & import("vue-demi").AllowedComponentProps & import("vue-demi").ComponentCustomProps, Readonly<import("vue-demi").ExtractPropTypes<{
    modelValue: {
        type: PropType<any[]>;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
    };
}>> & {
    onUpdate?: ((...args: any[]) => any) | undefined;
    onStart?: ((...args: any[]) => any) | undefined;
    onAdd?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
    onUnchoose?: ((...args: any[]) => any) | undefined;
    onEnd?: ((...args: any[]) => any) | undefined;
    onSort?: ((...args: any[]) => any) | undefined;
    onFilter?: ((...args: any[]) => any) | undefined;
    onClone?: ((...args: any[]) => any) | undefined;
    onMove?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    tag: string;
}>;
